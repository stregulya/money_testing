import { InlineKeyboard } from "grammy";
import { MAINIMAGE, MyConversation, MyConversationContext } from "../bot";
import { getCategoriesKeyboard } from "../keyboards/categories";
import { mainMenu } from "../keyboards/mainMenu";
import { addCategory, getCategories } from "../db/categories.repo";
import { addExtense } from "../db/expense.repo";

export async function newExtenseConversation(
  conversation: MyConversation,
  ctx: MyConversationContext
) {
  const userId = ctx.from?.id;
  if (!userId) throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å userId");

  const categoriesKeyboard = getCategoriesKeyboard(userId);
  categoriesKeyboard
    .text("üîô–ù–∞–∑–∞–¥", "back_to_menu")
    .text("‚ûï–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é", "new_category");

  await ctx.editMessageCaption({
    caption: "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
    reply_markup: categoriesKeyboard,
  });

  const categoryCtx = await conversation.waitFor("callback_query:data");
  await categoryCtx.answerCallbackQuery();

  if (categoryCtx.callbackQuery.data === "back_to_menu") {
    backToMenu(categoryCtx);
    return;
  }

  if (categoryCtx.callbackQuery.data === "new_category") {
    await ctx.editMessageCaption({
      caption: "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏‚¨áÔ∏è",
      reply_markup: new InlineKeyboard().text("üîô–ù–∞–∑–∞–¥", "back_to_menu"),
    });

    const newCategoryCtx = await conversation.waitFor([
      "message:text",
      "callback_query:data",
    ]);

    if (
      (newCategoryCtx.callbackQuery &&
        newCategoryCtx.callbackQuery.data === "back_to_menu") ||
      newCategoryCtx.message?.text === "üì±–ú–µ–Ω—é"
    ) {
      await newCategoryCtx.answerCallbackQuery();
      backToMenu(newCategoryCtx);
      return;
    }

    const categoryName = newCategoryCtx.message?.text!;
    addCategory(userId, categoryName);

    try {
      newCategoryCtx.message?.delete();
    } catch (error) {
      console.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: ", error);
    }

    await newExtenseConversation(conversation, categoryCtx);
  }

  const categoryId = categoryCtx.callbackQuery.data.replace("category_", "");
  const selectedCategory = getCategories(userId).find(
    (cat) => cat.id.toString() === categoryId
  );

  await ctx.editMessageCaption({
    caption: `–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${selectedCategory?.name}\n–í–≤–µ–¥–∏ —Å—É–º–º—É:`,
    reply_markup: new InlineKeyboard().text("üîô–ù–∞–∑–∞–¥", "back_to_menu"),
  });

  let amount: number | null = null;
  let amountCtx;

  while (amount === null || isNaN(amount)) {
    amountCtx = await conversation.waitFor([
      "message:text",
      "callback_query:data",
    ]);

    if (
      amountCtx.callbackQuery &&
      amountCtx.callbackQuery.data === "back_to_menu"
    ) {
      amountCtx.answerCallbackQuery();
      backToMenu(amountCtx);
      await conversation.halt();
    }

    amount = parseFloat(amountCtx.message?.text!);

    if (isNaN(amount)) {
      await ctx.editMessageCaption({
        caption: "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!",
        reply_markup: new InlineKeyboard().text("üîô–ù–∞–∑–∞–¥", "back_to_menu"),
      });
    }
  }

  try {
    await amountCtx?.api.deleteMessage(amountCtx.chatId!, amountCtx.msgId!);
  } catch (error) {
    console.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: ", error);
  }

  await ctx.editMessageCaption({
    caption: `–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${selectedCategory?.name}\n–°—É–º–º–∞: ${amount}—Ä—É–±.\n–ù–∞–ø–∏—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å '-', —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ –ø—É—Å—Ç—ã–º`,
    reply_markup: new InlineKeyboard().text("üîô–ù–∞–∑–∞–¥", "back_to_menu"),
  });

  const commentCtx = await conversation.waitFor([
    "message:text",
    "callback_query:data",
  ]);

  if (
    commentCtx.callbackQuery &&
    commentCtx.callbackQuery.data === "back_to_menu"
  ) {
    commentCtx.answerCallbackQuery();
    backToMenu(categoryCtx);
    return;
  }

  const comment = commentCtx.message?.text;

  try {
    await commentCtx?.api.deleteMessage(commentCtx.chatId!, commentCtx.msgId!);
  } catch (error) {
    console.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: ", error);
  }

  addExtense(userId, amount, selectedCategory?.name!, comment!);

  await ctx.editMessageCaption({
    caption:
      "–£—Å–ø–µ—à–Ω–æ!\n–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±—è –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã.\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏‚¨áÔ∏è",
    reply_markup: mainMenu,
  });

  return;
}

async function backToMenu(ctx: MyConversationContext) {
  await ctx.editMessageCaption({
    caption:
      "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±—è –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã.\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏‚¨áÔ∏è",
    reply_markup: mainMenu,
  });
}
